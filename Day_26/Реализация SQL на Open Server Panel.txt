https://ospanel.io/docs/
http://127.0.0.1/openserver/phpmyadmin/index.php?route=/

MySQL - СУБД (Система Управления Базами Данных).
PHP MyAdmin - визуальное оформление MySQL.
Open Server Panel - сервер, на котором находится наша БД.

################################################################ ЗНАКОМСТВО С SQL #####################################################################

1) создать новую базу данных (test_database);
2) Создать таблицу (users 4 столбца) вперед;
3) Тип таблицы InnoDB;
4) Предпросмотр SQL;
5) Заполнить "Имя" по порядку сверху вниз: id, name, email, password;
6) Заполнить "Типы данных" по порядку сверху вниз: id=INT, name=VARCHAR, email=VARCHAR, password=VARCHAR;
7) Заполнить "Длина/значения" по порядку сверху вниз: id=пусто, name=32, email=32, password=32;
8) Предпросмотр SQL;
9) Пропускаем "По умолчанию" (везде Нет);
10) Пропускаем "Сравнение" (везде Пусто);
11) Пропускаем "Атрибуты" (везде Пусто);
11) Пропускаем "Null" (везде нет галочки);
12) Для "Имя" которые будут именть уникальные значения выставляем в "Индекс". Для первого столбца "id" выставляем в "Индекс" PRIMARY. Для остальных "Индекс" не изменяем;
13) "AUTO_INCREMENT" означает увеличение значения на +1. Ставим галочку для первого столбца "id". Для остальных "AUTO_INCREMENT" не изменяем;
14) "Комментарии" заполнять не обязательно. Для примера заполним "Комментарии" для первого столбца "id" (комментарий);
15) Пропускаем "Виртуальность" (везде Пусто);
16) Пропускаем "Изменить поле" (везде Пусто);
17) Заполним "Комментарии к таблице" (комментарий к таблице);
18) Заполним для "Сравнение" (utf8_general_ci);
19) Остальное оставляем без изменений;
20) Предпросмотр SQL;
21) Сохранить;
22) Выбрать сверху "Вставить";
23) id пропускаем, заполняем name=Andrey, email=Andrey@gmail.com, password=aqwerty и нажимаем "Вперед";
24) Выбрать сверху обзор. Если данные добавились, все ОК;
25) Выбрать сверху "Вставить";
26) id пропускаем, заполняем name=Kate, email=Kate@gmail.com, password=kqwerty и нажимаем "Вперед";
27) Выбрать сверху обзор. Если данные добавились, все ОК;
28) Слева нажимаем на "test_database";
29) Сверху выбираем "Дизайнер". Тут можно оставлять ссылки и создавать связи между таблицами;
30) Либо выбрать таблицу -> структура -> связи. Далее вручную прописать связь.

################################################################## SQL School #####################################################################

Нарисовали в графическом (или текстовом) редакторе, описали базу данных, указали ключи (KEY).

CLASS
number (2А, 5Б и т.д.) (KEY)
number_of_persons
headman
jurnal_number

JURNAL
number (KEY)
performance

OFFICE
number (KEY)
floor
teacher

SCHEDULE
teacher_name (KEY)
class (KEY)
day_of_the_week (KEY)
subject (KEY)
office

STUDENT
name (KEY)
date
class

TEACHER
name (KEY)
date
office
subject
expirience
class


Типы связей таблиц баз данных:

1. Один к одному (1:1)
2. Один ко многим (1:many)

Примеры:

КАБИНЕТ - № кабинета (KEY) --> УЧИТЕЛЬ - кабинет (1:1)
КЛАССЫ - № журнала --> ЖУРНАЛ - № журнала (KEY) (1:1)

РАСПИСАНИЕ - ФИО учителя (KEY) --> УЧИТЕЛЬ - ФИО (KEY) (1:many)
РАСПИСАНИЕ - № класса (KEY) --> КЛАСС - № класса (KEY) (1:many)
УЧЕНИК - № класса --> КЛАСС - № класса (KEY) (1:many)


############################################################# Создание БД School #####################################################################

1) создать базу данных (School);

########################################################## Создание таблицы CLASS #####################################################################

CLASS
number (2А, 5Б и т.д.) (KEY)
number_of_persons
headman
jurnal_number

CLASS
2) Создать таблицу (CLASS 4 столбца) вперед;
3) Тип таблицы InnoDB;
5) Заполнить "Имя" по порядку сверху вниз: number, number_of_persons, headman, jurnal_number;
6) Заполнить "Типы данных" по порядку сверху вниз: number=VARCHAR, number_of_persons=INT, headman,=VARCHAR, jurnal_number=INT;
7) Заполнить "Длина/значения" по порядку сверху вниз: number=32, number_of_persons=пусто, headman,=32, jurnal_number=пусто;
8) Пропускаем "По умолчанию" (везде Нет);
9) Пропускаем "Сравнение" (везде Пусто);
10) Пропускаем "Атрибуты" (везде Пусто);
11) Пропускаем "Null" (везде нет галочки);
12) для первого столбца "number" выставляем в "Индекс" PRIMARY. Для остальных "Индекс" не изменяем;
13) Пропускаем "AUTO_INCREMENT" (везде нет галочки);
14) Пропускаем  "Комментарии" (везде Пусто);
15) Пропускаем "Виртуальность" (везде Пусто);
16) Пропускаем "Изменить поле" (везде Пусто);
17) Пропускаем "Комментарии к таблице" (пусто);
18) Пропускаем  "Сравнение" (пусто);
19) Остальное оставляем без изменений;
20) Предпросмотр SQL;
21) Сохранить;

*чтобы добавить дополнительно +1 поле (строка таблицы) нажать кнопку "Вперед"

########################################################## Создание таблицы JURNAL ######################################################################

JURNAL
number (KEY)
performance

JURNAL
2) Создать таблицу (JURNAL 2 столбца) вперед;
3) Тип таблицы InnoDB;
5) Заполнить "Имя" по порядку сверху вниз: number, performance;
6) Заполнить "Типы данных" по порядку сверху вниз: number=INT, performance=INT;
7) Заполнить "Длина/значения" по порядку сверху вниз:  number=пусто, performance=пусто;
8) Пропускаем "По умолчанию" (везде Нет);
9) Пропускаем "Сравнение" (везде Пусто);
10) Пропускаем "Атрибуты" (везде Пусто);
11) Пропускаем "Null" (везде нет галочки);
12) для первого столбца "number" выставляем в "Индекс" PRIMARY. Для остальных "Индекс" не изменяем;
13) Пропускаем "AUTO_INCREMENT" (везде нет галочки);
14) Пропускаем  "Комментарии" (везде Пусто);
15) Пропускаем "Виртуальность" (везде Пусто);
16) Пропускаем "Изменить поле" (везде Пусто);
17) Пропускаем "Комментарии к таблице" (пусто);
18) Пропускаем  "Сравнение" (пусто);
19) Остальное оставляем без изменений;
20) Предпросмотр SQL;
21) Сохранить;

########################################################## Создание таблицы OFFICE #####################################################################

OFFICE
number (KEY)
floor
teacher

OFFICE
2) Создать таблицу (OFFICE 3 столбца) вперед;
3) Тип таблицы InnoDB;
5) Заполнить "Имя" по порядку сверху вниз: number, floor, teacher;
6) Заполнить "Типы данных" по порядку сверху вниз: number=INT, floor=INT, teacher=VARCHAR;
7) Заполнить "Длина/значения" по порядку сверху вниз: number=пусто, floor=пусто, teacher=32;
8) Пропускаем "По умолчанию" (везде Нет);
9) Пропускаем "Сравнение" (везде Пусто);
10) Пропускаем "Атрибуты" (везде Пусто);
11) Пропускаем "Null" (везде нет галочки);
12) для первого столбца "number" выставляем в "Индекс" PRIMARY. Для остальных "Индекс" не изменяем;
13) Пропускаем "AUTO_INCREMENT" (везде нет галочки);
14) Пропускаем  "Комментарии" (везде Пусто);
15) Пропускаем "Виртуальность" (везде Пусто);
16) Пропускаем "Изменить поле" (везде Пусто);
17) Пропускаем "Комментарии к таблице" (пусто);
18) Пропускаем  "Сравнение" (пусто);
19) Остальное оставляем без изменений;
20) Предпросмотр SQL;
21) Сохранить;

########################################################## Создание таблицы SCHEDULE #################################################################

SCHEDULE
teacher_name (KEY)
class (KEY)
day_of_the_week (KEY)
subject (KEY)
office

SCHEDULE
2) Создать таблицу (SCHEDULE 5 столбцов) вперед;
3) Тип таблицы InnoDB;
5) Заполнить "Имя" по порядку сверху вниз: teacher_name, class, day_of_the_week, subject, office;
6) Заполнить "Типы данных" по порядку сверху вниз: teacher_name=VARCHAR, class=VARCHAR, day_of_the_week=VARCHAR, subject=VARCHAR, office=INT;
7) Заполнить "Длина/значения" по порядку сверху вниз: teacher_name=32, class=32, day_of_the_week=32, subject=32, office=пусто;
8) Пропускаем "По умолчанию" (везде Нет);
9) Пропускаем "Сравнение" (везде Пусто);
10) Пропускаем "Атрибуты" (везде Пусто);
11) Пропускаем "Null" (везде нет галочки);
12) Для первых четырех столбцов "teacher_name, "class", "day_of_the_week, "subject" выставляем в "Индекс" PRIMARY. Для "№ кабинета" "Индекс" не изменяем;
13) Пропускаем "AUTO_INCREMENT" (везде нет галочки);
14) Пропускаем  "Комментарии" (везде Пусто);
15) Пропускаем "Виртуальность" (везде Пусто);
16) Пропускаем "Изменить поле" (везде Пусто);
17) Пропускаем "Комментарии к таблице" (пусто);
18) Пропускаем  "Сравнение" (пусто);
19) Остальное оставляем без изменений;
20) Предпросмотр SQL;
21) Сохранить;

########################################################## Создание таблицы STUDENT #################################################################

STUDENT
name (KEY)
date
class

STUDENT
2) Создать таблицу (STUDENT 3 столбца) вперед;
3) Тип таблицы InnoDB;
5) Заполнить "Имя" по порядку сверху вниз: name, date, class;
6) Заполнить "Типы данных" по порядку сверху вниз: name=VARCHAR, date=INT, class=VARCHAR;
7) Заполнить "Длина/значения" по порядку сверху вниз: name=32, date=пусто, class=32;
8) Пропускаем "По умолчанию" (везде Нет);
9) Пропускаем "Сравнение" (везде Пусто);
10) Пропускаем "Атрибуты" (везде Пусто);
11) Пропускаем "Null" (везде нет галочки);
12) для первого столбца "name" выставляем в "Индекс" PRIMARY. Для остальных "Индекс" не изменяем;
13) Пропускаем "AUTO_INCREMENT" (везде нет галочки);
14) Пропускаем  "Комментарии" (везде Пусто);
15) Пропускаем "Виртуальность" (везде Пусто);
16) Пропускаем "Изменить поле" (везде Пусто);
17) Пропускаем "Комментарии к таблице" (пусто);
18) Пропускаем  "Сравнение" (пусто);
19) Остальное оставляем без изменений;
20) Предпросмотр SQL;
21) Сохранить;

########################################################## Создание таблицы TEACHER ################################################################

TEACHER
name (KEY)
date
office
subject
expirience
class

TEACHER
2) Создать таблицу (TEACHER 6 столбцов) вперед;
3) Тип таблицы InnoDB;
5) Заполнить "Имя" по порядку сверху вниз: name, date, office, subject, expirience, class
6) Заполнить "Типы данных" по порядку сверху вниз: name=VARCHAR, date=INT, office=INT, subject=VARCHAR, expirience=INT, class=INT;
7) Заполнить "Длина/значения" по порядку сверху вниз: name=32, date=пусто, office=пусто, subject=32, expirience=пусто, class=пусто;
8) Пропускаем "По умолчанию" (везде Нет);
9) Пропускаем "Сравнение" (везде Пусто);
10) Пропускаем "Атрибуты" (везде Пусто);
11) Заполнить "Null" для subject, expirience, class (везде ставим галочки), остальные пропускаем (нет галочек);
12) для первого столбца "name" выставляем в "Индекс" PRIMARY. Для остальных "Индекс" не изменяем;
13) Пропускаем "AUTO_INCREMENT" (везде нет галочки);
14) Пропускаем  "Комментарии" (везде Пусто);
15) Пропускаем "Виртуальность" (везде Пусто);
16) Пропускаем "Изменить поле" (везде Пусто);
17) Пропускаем "Комментарии к таблице" (пусто);
18) Пропускаем  "Сравнение" (пусто);
19) Остальное оставляем без изменений;
20) Предпросмотр SQL;
21) Сохранить;



########################################################## Создание связей БД School ##############################################################

!!! Поскольку при создании БД сначала была создана связь между таблицами, и таблица заполняласьпутемвставки. А именно расписание было заполнено (класс был прописан вручную).
!!! В таком случае возникает проблема при создании КЛАССА. 
!!! СНАЧАЛА УСТАНОВИТЬ ВСЕ ВОЗМОЖНЫЕ СВЯЗИ, ПОТОМ ЗАПОЛНЯТЬ ТАБИЦЫ (ДОБАВИТЬ УЧИТЕЛЕЙ, УЧЕНИКОВ, КЛАССЫ, и др.).

CLASS
30) Выбрать таблицу -> структура -> связи. Далее вручную прописать связь.
jurnal_number -> school-> jurnal -> number

SCHEDULE
30) Выбрать таблицу -> структура -> связи. Далее вручную прописать связь.
teacher_name -> school-> teacher -> name
class -> school-> class -> number

STUDENT
30) Выбрать таблицу -> структура -> связи. Далее вручную прописать связь.
class-> school-> class -> number

TEACHER
30) Выбрать таблицу -> структура -> связи. Далее вручную прописать связь.
class-> school-> class -> number

########################################################## Заполнение таблиц БД School #############################################################

!!! Поскольку установлены связи, заполнять таблицы нужно опираясь на то что с чем связано. В НАШЕМ СЛУЧАЕ НЕ ПОЛУЧИТСЯ СНАЧАЛА СОЗДАТЬ КЛАСС ПОТОМ ЖУРНАЛ.

JURNAL
number (KEY)
performance

22) Выбрать сверху "Вставить"
23) Заполняем number=111, performance=3 и нажимаем "Вперед"
24) Выбрать сверху обзор. Если данные добавились, все ОК.
25) Выбрать сверху "Вставить"
26) Заполняем number=134, performance=5 и нажимаем "Вперед"
27) Выбрать сверху обзор. Если данные добавились, все ОК.

CLASS
number (2А, 5Б и т.д.) (KEY)
number_of_persons
headman
jurnal_number

22) Выбрать сверху "Вставить"
23) Заполняем number=2А, number_of_persons=25, headman=Egorov Artem Valerievich, jurnal_number=выбрать (ПОСКОЛЬКУ СОЗДАНА СВЯЗЬ, то 111) и нажимаем "Вперед"
24) Выбрать сверху обзор. Если данные добавились, все ОК.
25) Выбрать сверху "Вставить"
26) Заполняем number=4B, number_of_persons=29, headman=Romanenko Ivan Vladimirivich, jurnal_number=выбрать (ПОСКОЛЬКУ СОЗДАНА СВЯЗЬ, то 134) и нажимаем "Вперед"
27) Выбрать сверху обзор. Если данные добавились, все ОК.

OFFICE
number (KEY)
floor
teacher

22) Выбрать сверху "Вставить"
23) Заполняем number=1, floor=1, teacher=Ilyina Tomara Borisovna и нажимаем "Вперед"
24) Выбрать сверху обзор. Если данные добавились, все ОК.
25) Выбрать сверху "Вставить"
26) Заполняем number=4, floor=1, teacher=Sidorova Tatyana Nikolaevna и нажимаем "Вперед"
27) Выбрать сверху обзор. Если данные добавились, все ОК.

!!! Поскольку установлены связи, заполнять таблицы нужно опираясь на то что с чем связано. В НАШЕМ СЛУЧАЕ НЕ ПОЛУЧИТСЯ СНАЧАЛА СОЗДАТЬ РАСПИСАНИЕ ПОТОМ УЧИТЕЛЯ.

TEACHER
name (KEY)
date
office
subject
expirience
class

22) Выбрать сверху "Вставить"
23) Заполняем name=Ilyina Tomara Borisovna, date=1981-05-24, office=выбрать (ПОСКОЛЬКУ СОЗДАНА СВЯЗЬ, то 2), subject=literature, expirience=3, class=2A и нажимаем "Вперед"
24) Выбрать сверху обзор. Если данные добавились, все ОК.
25) Выбрать сверху "Вставить"
26) Заполняем name=Sidorova Tatyana Nikolaevna, date=1976-05-24, office=выбрать (ПОСКОЛЬКУ СОЗДАНА СВЯЗЬ, то 4), subject=mathematic, expirience=6, class=4B и нажимаем "Вперед"
27) Выбрать сверху обзор. Если данные добавились, все ОК.

SCHEDULE
teacher_name (KEY)
class (KEY)
day_of_the_week (KEY)
subject (KEY)
office

22) Выбрать сверху "Вставить"
23) Заполняем teacher_name=выбрать (ПОСКОЛЬКУ СОЗДАНА СВЯЗЬ, то Ilyina Tomara Borisovna), class=выбрать (ПОСКОЛЬКУ СОЗДАНА СВЯЗЬ, то 2A), day_of_the_week=Wednesday, subject=literature, office=2 и нажимаем "Вперед"
24) Выбрать сверху обзор. Если данные добавились, все ОК.
25) Выбрать сверху "Вставить"
26) Заполняем teacher_name=выбрать (ПОСКОЛЬКУ СОЗДАНА СВЯЗЬ, то Sidorova Tatyana Nikolaevna), class=выбрать (ПОСКОЛЬКУ СОЗДАНА СВЯЗЬ, то 4B), day_of_the_week=Wednesday, subject=mathematic, office=4 и нажимаем "Вперед"
27) Выбрать сверху обзор. Если данные добавились, все ОК.

STUDENT
name (KEY)
date
class

22) Выбрать сверху "Вставить"
23) Заполняем teacher_name=Romanenko Dmitry Vladimirovich, date=2015-05-14, class=выбрать (ПОСКОЛЬКУ СОЗДАНА СВЯЗЬ, то 2A) и нажимаем "Вперед"
24) Выбрать сверху обзор. Если данные добавились, все ОК.
25) Выбрать сверху "Вставить"
26) Заполняем teacher_name=Melekhin Dmitry Pavlovich, date=2013-08-22, class=выбрать (ПОСКОЛЬКУ СОЗДАНА СВЯЗЬ, то 4B) и нажимаем "Вперед"
27) Выбрать сверху обзор. Если данные добавились, все ОК.



########################################################## Запрос к SQL School ##########################################################################

обратимся к таблице TEACHER

SELECT * FROM `teacher` # выводит БД всех учителей
SELECT `name` FROM `teacher`   #   выводит столбец `name` всех учителей
SELECT `name`, `date` FROM `teacher`   #   выводит два столбца `name` и `date` всех учителей
SELECT `name`, `date` FROM `teacher` WHERE `office`=2   #   выводит учителя, у которого office равен 2
SELECT `name`, `date` FROM `teacher` WHERE `class` IS NULL   #   выводит учителя, у которого есть какое-либо поле со значением Null (если была поставлена галочка наротив Null при создании teacher)
SELECT `name`, `date` FROM `teacher` WHERE `office` < 10   #   выводит учителей, у которых office меньше 10
SELECT `name`, `date` FROM `teacher` WHERE `office` < 10 and `office` = 4   #   выводит учителей, у которых office меньше 10 и равен 4

SELECT `name`, `date` FROM `teacher` ORDER BY `name`   #   сортировка по имени
SELECT `name`, `date` FROM `teacher` ORDER BY `date`   #   сортировка по дате рождения
SELECT `name`, `date` FROM `teacher` ORDER BY `name`, `date`   #   сортировка по имени и дате рождения
SELECT `name`, `date` FROM `teacher` ORDER BY 1   #   сортировка по порядковому номеру в операторе select
SELECT `name`, `date` FROM `teacher` ORDER BY 1 DESC   #   сортировка по порядковому номеру в операторе select (reverse)

SELECT `name`, `office` FROM `teacher`, `office`   #   связывает две таблички `teacher`, `office` по общим `name`, `office`
SELECT * FROM `teacher`, `student`, `office`   #   связывает ТРИ таблички.

!!! ЧТОБЫ НЕ ЗАПУТАТЬСЯ В СВЯЗЯХ, НУЖНО ПРИСВАИВАТЬ ХАРАКТЕРИСТИКАМ ИМЯ КЛАССА И ХАРАКТЕРИСТИКУ (teacher_name, student_name)
