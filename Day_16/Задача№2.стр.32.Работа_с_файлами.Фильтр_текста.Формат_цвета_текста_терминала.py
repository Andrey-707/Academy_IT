# Задача№2.стр.32.
# Дан файл (в формате .txt) с датами:

# 2012/09/18 12:10
# 2079/01/21 09:09
# 2001/01/01 17:80
# 1968/17/19 02:21
# 1988/02/29 03:32
# 1012/06/18 19:10
# 2012/07/21 25:21
# 2021/05/31 01:12

# Выбрать существующие даты в промежутке с 1950 по 2050 год.
# Ответ вывести в любом формате.

# Пример:
# 2012/09/18 12:10 - Да
# 2079/01/21 09:09 - Нет (после 2050)
# 2001/01/01 17:80 - Да
# 1968/17/19 02:21 - Нет (17 месяца нет)

from rich import print


# Решение_1.
# Заполненим файл Date.txt входными данными из строки some_text. Применим к данным файла "ручной" фильтр
# данных, т.е. условия в фильтре пропишем вручную.

# входные данные:
some_text = """\
2012/09/18 12:10
2079/01/21 09:09
2001/01/01 17:80
1968/17/19 02:21
1988/02/29 03:32
1012/06/18 19:10
2012/07/21 25:21
2021/05/31 01:12"""

print("[bold magenta]IN:[/]")
print(some_text)

# создадим файл с датами Date.txt
with open("date.txt", "w") as r: # ЗАПИСЬ/ПЕРЕЗАПИСЬ "w"
    r.write(some_text)

# считаем ВСЮ информацию из файла.
print("[bold magenta]\nOUT:[/]")
with open("Date.txt") as r:
    print(r.read())

# считаем информацию из файла и применим фильтр для вывода
print("[bold magenta]\nfilter:[/]")
with open("Date.txt") as r:
    for i in r:
        if "2012/09/18 12:10" in i:
            print("2012/09/18 12:10 - Да")
        elif "2079/01/21 09:09" in i:
            print("2079/01/21 09:09 - НЕТ (год 2079 заграницами отбора)")
        elif "2001/01/01 17:80" in i:
            print("2001/01/01 17:80 - НЕТ (минуты 80 нет)")
        elif "1968/17/19 02:21" in i:
            print("1968/17/19 02:21 - Нет (17 месяца нет)")
        elif "1988/02/29 03:32" in i:
            print("1988/02/29 03:32 - ДА")
        elif "1012/06/18 19:10" in i:
            print("1012/06/18 19:10 - НЕТ (год 1012 заграницами отбора)")
        elif "2012/07/21 25:21" in i:
            print("2012/07/21 25:21 - НЕТ (25 часа нет)")
        elif "2021/05/31 01:12" in i:
            print("2021/05/31 01:12 - ДА")
'''IN:
2012/09/18 12:10
2079/01/21 09:09
2001/01/01 17:80
1968/17/19 02:21
1988/02/29 03:32
1012/06/18 19:10
2012/07/21 25:21
2021/05/31 01:12

OUT:
2012/09/18 12:10
2079/01/21 09:09
2001/01/01 17:80
1968/17/19 02:21
1988/02/29 03:32
1012/06/18 19:10
2012/07/21 25:21
2021/05/31 01:12

filter:
2012/09/18 12:10 - Да
2079/01/21 09:09 - НЕТ (год 2079 заграницами отбора)
2001/01/01 17:80 - НЕТ (минуты 80 нет)
1968/17/19 02:21 - Нет (17 месяца нет)
1988/02/29 03:32 - ДА
1012/06/18 19:10 - НЕТ (год 1012 заграницами отбора)
2012/07/21 25:21 - НЕТ (25 часа нет)
2021/05/31 01:12 - ДА
'''


# Решение_2.
# Заполненим файл Date.txt входными данными из строки some_text. Улучшим фильтр (добавим условия для фильтра).

# входные данные:
some_text = """\
2012/09/18 12:10
2079/01/21 09:09
2001/01/01 17:80
1968/17/19 02:21
1988/02/29 03:32
1012/06/18 19:10
2012/07/21 25:21
2021/05/31 01:12"""

print("[bold magenta]IN:[/]")
print(some_text)

# создадим файл с датами Date.txt
with open("D:\\Python\\Test\\Date.txt", "w") as r: # ЗАПИСЬ/ПЕРЕЗАПИСЬ "w"
    r.write(some_text)

# считаем ВСЮ информацию из файла.
print("[bold magenta]\nOUT:[/]")
with open("Date.txt") as r:
    print(r.read())

# считаем информацию из файла, отредактируем данные, а затем настроим фильтр для вывода информации
print("[bold magenta]\nfilter:[/]")
with open("Date.txt") as r:
    
    # текст из файла объединим в строку и присвоим в переменную
    string_1 = "".join(r)
    # print(string_1)

    # список из строк текста (текст разбит по символу разделителю перевода строки)
    list_1 = string_1.split("\n")
    # print(list_1)

    # Приведем текст к строке чисел (ичистим текст от символов, ненужные символы помести в ban_list)
    ban_list = ["\n", "/", ":"] # список символов, от которых избавимся в тексте
    for i in ban_list:
        # перевод строки заменим на пробел
        if i == "\n":
            # перезаписываем исходный текст в измененный текст БЕЗ символов
            string_1 = string_1.replace(i, " ")
        # символ "/" заменим на пробел
        elif i == "/":
            string_1 = string_1.replace(i, " ")
        # символ ":" заменим на пробел    
        elif i == ":":
            string_1 = string_1.replace(i, " ")      
    # print(string_1) # OUT: 2012 09 18 12 10 2079 01 21 09 09 2001 01 01 17 80 1968 17 19 02 21
    #                #      1988 02 29 03 32 1012 06 18 19 10 2012 07 21 25 21 2021 05 31 01 12

    # Используя 'list comprehension' из строки сделаем список чисел
    list_2 = [int(i) for i in string_1.split(" ")]
    # print(list_2) # OUT: [2012, 9, 18, 12, 10, 2079, 1, 21, 9, 9, 2001, 1, 1, 17,
    #               #       80, 1968, 17, 19, 2, 21, 1988, 2, 29, 3, 32, 1012, 6,
    #               #       18, 19, 10, 2012, 7, 21, 25, 21, 2021, 5, 31, 1, 12]

    # фильтр для вывода информации (для лет, месяцев, дней, часов и минут)
    max_iter = len(list_1) # количество итераций
    step_1 = 0 # шаг по списку list_1
    step_2 = 0 # шаг по списку list_2
    while max_iter > 0:

        # фильтр лет
        if list_2[step_2] > 2050 or list_2[step_2] < 1950:
            print(list_1[step_1], "- НЕТ (год", list_2[step_2], "за границами отбора)")        
        
        # фильр месяцев
        elif list_2[1+step_2] > 12 or list_2[1+step_2] < 1:
            print(list_1[step_1], "- НЕТ (месяца", list_2[1+step_2], "нет)")

        # фильтр дней (не учитывается февраль и високосный год)
        elif list_2[2+step_2] > 31 or list_2[2+step_2] < 1:
            print(list_1[step_1], "- НЕТ (дня", list_2[2+step_2], "нет)")
        
        # фильтр часов
        elif list_2[3+step_2] > 24 or list_2[3+step_2] < 1:
            print(list_1[step_1], "- НЕТ (часа", list_2[3+step_2], "нет)")
        
        # фильтр минут
        elif list_2[4+step_2] > 60 or list_2[4+step_2] < 1:
            print(list_1[step_1], "- НЕТ (минуты", list_2[4+step_2], "нет)")
        
        # если проходит фильтр, то печатай: "текст - ДА"
        else:
            print(list_1[step_1], "- ДА")
        step_1 += 1
        step_2 += 5
        max_iter -= 1

'''IN:                      
2012/09/18 12:10         
2079/01/21 09:09         
2001/01/01 17:80         
1968/17/19 02:21         
1988/02/29 03:32         
1012/06/18 19:10         
2012/07/21 25:21         
2021/05/31 01:12         
                         
OUT:                     
2012/09/18 12:10         
2079/01/21 09:09         
2001/01/01 17:80         
1968/17/19 02:21         
1988/02/29 03:32         
1012/06/18 19:10         
2012/07/21 25:21         
2021/05/31 01:12         
                         
filter:                  
2012/09/18 12:10 - ДА
2079/01/21 09:09 - НЕТ (год 2079 за границами отбора)
2001/01/01 17:80 - НЕТ (минуты 80 нет)
1968/17/19 02:21 - НЕТ (месяца 17 нет)
1988/02/29 03:32 - ДА
1012/06/18 19:10 - НЕТ (год 1012 за границами отбора)
2012/07/21 25:21 - НЕТ (часа 25 нет)
2021/05/31 01:12 - ДА
'''

# ---------------------------------------- ПРИМЕЧАНИЕ -----------------------------------------------------------
# Модуль datetime предотвращает добавление недействительных данных, например, попытку создания
# пользователем даты и времени, в которой месяц 17 и др. Eсли в месяц пользователь попытается
# поставить цифру 17, программа вылетит с исключением

# ValueError: month must be in 1..12

# это касается и остального в формате времени (дней, часов, минут)

from datetime import datetime


N = 8 # длина каждого списка равна 8
year = [2012, 2079, 2001, 1968, 1988, 1012, 2012, 2021]
month = [9, 1, 1, 12, 2, 6, 7, 5]
day = [18, 21, 1, 19, 24, 18, 21, 24]
hour = [12, 9, 17, 2, 3, 19, 23, 1]
minute = [10, 9, 20, 21, 32, 10, 21, 12]

# datetime.strftime("%Y/%m/%d %H:%M") возвращает данные в виде строки '2012/09/18 12:10'

def make_date(year:int, month:int, day:int, hour:int, minute:int):
    '''Функция возвращает список, состоящий из строк с датой и временем'''
    x = []
    # в цикле 8 итераций, соответственно списки "year,month,day,hour,minute" распакуются полностью
    for i in range(N):
        x.append(datetime(year=year[i], month=month[i], day=day[i], hour=hour[i], \
            minute=minute[i]).strftime("%Y/%m/%d %H:%M"))
    return x

# Списко из строк. Этими строками далее заполним файл Date.txt
print("[bold magenta]IN:[/]")
date_list = "\n".join(make_date(year, month, day, hour, minute))
print(date_list)

print() # пустая строка

# Создадим файл с датами Date.txt и заполним его строками
with open("Date.txt", "w") as r: # ЗАПИСЬ/ПЕРЕЗАПИСЬ "w"
    r.write(date_list)

# Считаем информацию из файла. Эта информация исключает ошибочный ввод несуществующих даты и времени.
print("[bold magenta]OUT:[/]")
with open("Date.txt") as r:
    print(r.read())

'''IN:
2012/09/18 12:10
2079/01/21 09:09
2001/01/01 17:20
1968/12/19 02:21
1988/02/24 03:32
1012/06/18 19:10
2012/07/21 23:21
2021/05/24 01:12

OUT:
2012/09/18 12:10
2079/01/21 09:09
2001/01/01 17:20
1968/12/19 02:21
1988/02/24 03:32
1012/06/18 19:10
2012/07/21 23:21
2021/05/24 01:12
'''


###################################################################################################################
# Решение_3.
# Задача№2.стр.32.Работа с файлами. Фильтр_текста.

# В этом решении фильтр применен ТОЛЬКО к годам и месяцам.

# \033[31m форматирует цвет вывода текста в консоли (31 указывает на красный цвет)
# \033[32m форматирует цвет вывода текста в консоли (32 указывает на зеленый цвет)

with open("data.txt", "r", encoding="utf-8") as f:  # открываем файл на чтение
    # создаем списки in_file - сохраняем сюда файл, out_file - обработанный результат
    in_file, out_file = [], []
    # считываем построчно файл    
    for i in f:
        i = i.rstrip() # убираем символ переноса строки
        in_file.append(i)
    for j in in_file:
        if 1950 > int(j[:4]): # int(j[:4]) - это первый четыре символа строки преобразованные в число (года)
            if 1 > int(j[5:7]) or int(j[5:7]) > 12:
                res = f"\033[31m{j} - Нет, месяца {j[5:7]} не существует, год до 1950"
                out_file.append(res)
            else:
                res = f"\033[31m{j} - Нет, год до 1950" 
                out_file.append(res)
        elif int(j[:4]) > 2050:
            if 1 > int(j[5:7]) or int(j[5:7]) > 12:
                res = f"\033[31m{j} - Нет, месяца {j[5:7]} не существует, год после 2050"
                out_file.append(res)
            else:
                res = f"\033[31m{j} - Нет, год после 2050"
                out_file.append(res)
        elif 1 > int(j[5:7]) or int(j[5:7]) > 12:
            res = f"\033[31m{j} - Нет, месяца {j[5:7]} не существует"
            out_file.append(res)
        else:
            res = f"\033[32m{j} - Да"
            out_file.append(res)

    # вывод результата
    # входящие данные
    print(f"[bold magenta]IN:[/]")
    for k in range(len(in_file)):
        print(in_file[k])
    # выходящие данные
    print(f"[bold magenta]\nOUT:[/]")
    for k in range(len(out_file)):
        print(out_file[k])

'''IN:
2012/09/18 12:10
2079/01/21 09:09
2001/01/01 17:80
1968/17/19 02:21
1988/02/29 03:32
1012/06/18 19:10
2012/07/21 25:21
2021/05/31 01:12

OUT:
2012/09/18 12:10 - Да
2079/01/21 09:09 - Нет, год после 2050
2001/01/01 17:80 - Да
1968/17/19 02:21 - Нет, месяца 17 не существует
1988/02/29 03:32 - Да
1012/06/18 19:10 - Нет, год до 1950
2012/07/21 25:21 - Да
2021/05/31 01:12 - Да
'''