# Задача№1.стр.31.Работа с файлами. Пирамида
# Создайте пустой файл pyramid.txt и напишите функцию, которая будет рисовать в этом файле пирамиду.
# Входные данные:
# Функция принимает два аргумента - количество строк из которых будет состоять пирамида и символ, которым она будет заполнена.

from rich import print


# # !!! процесс создания шаблона от линии 'START' до 'FINISH' !!!
# # -------------------------------------------------------------------------------------------- START
# # нарисуем пирамиду высотой 5 строк "руками"
# print("[bold magenta]Эскиз пирамиды высотой 5 строк[/]")
# print(" "*4 + "#"*1 + " "*4)
# print(" "*3 + "#"*3 + " "*3)
# print(" "*2 + "#"*5 + " "*2)
# print(" "*1 + "#"*7 + " "*1)
# print(" "*0 + "#"*9 + " "*0 )

# print() # пустая строка

# # переведем рисование в цикл.
# n = int(input("Высота: ")) # высота пирамиды
# sym = input("Символ: ") # символ заполнения

# print("[bold magenta]Пирамида высотой[/]", n, "[bold magenta]строк, заполнена символом[/]", sym)
# for i in range(n, 0, -1):
#     # процесс заполнения пирамиды состоит из четырех этапов:
#     # 1.Пробелы; 2.Символы; 3.Симметрия символов; 4.Пробелы
#     print(" "*i + sym*(n-i+1) + sym*(n-i) + " "*i)

# # либо можно ввести переменную step и внутри цикла увеличивать step на 2
# step = 1
# print("[bold magenta]Пирамида высотой[/]", n, "[bold magenta]строк, заполнена символом[/]", sym)
# for i in range(n, 0, -1):
#     # тогда процесс заполнения пирамиды будет состоять из трех этапов:
#     # 1.Пробелы; 2.Символы; 3.Пробелы
#     print(" "*i + sym*step + " "*i)
#     step += 2
# # -------------------------------------------------------------------------------------------- FINISH

# # переходим к созданию функции

# #############################
# ## НЕПЕРЕВЕРНУТАЯ ПИРАМИДА ##
# #############################

# # данный случай добавляет симметричные пробелы на правую часть пирамиды. Файл заполняется циклами.
# # s = " "*(n-1-i) + sym*(1+i*2) + " "*(n-1-i) + "\n"

# def make_pyramid(n:int, sym:str):
#     '''Функция принимает на вход n - количество строк пирамиды и sym - символы,
#     которыми она заполняется'''
    
#     # создаем новый файл, указываем место куда он сохраняется
#     with open("Pyramid.txt", "w") as r: # ЗАПИСЬ/ПЕРЕЗАПИСЬ "w"
#         for i in range(n):
#             # процесс заполнения пирамиды состоит из трех этапов:
#             # 1.Пробелы; 2.Символы; 3.Пробелы
#             r.write(" "*(n-1-i) + sym*(1+i*2) \
#                      + " "*(n-1-i) + "\n") # в процессе записи в файл добавляется символ перевода строки "\n"

# # вызываем функцию и создаем файл Pyramid.txt
# print("[bold magenta]IN:[/]")
# n = int(input("Высота: ")) # высота пирамиды
# sym = input("Символ: ") # символ заполнения
# make_pyramid(n, sym) # получаем полностью симметричную фигуру по пробелам и по символам

# # далее считываем информацию из файла.
# print("[bold magenta]OUT:[/]")
# with open("Pyramid.txt") as r:
#     # итеративно считываем строки из файла. Количество итераций равно n строк пирамиды
#     for i in range(n):
#         print(r.readline(), end="")

# '''IN:
# Высота: 5
# Символ: #
# OUT:
#     #
#    ###
#   #####
#  #######
# #########
# '''

# ############################################################
# ## ПЕРЕВЕРНУТАЯ ПИРАМИДА (отличие на этапе записи в файл) ##
# ############################################################

# # данный случай добавляет симметричные пробелы на правую часть пирамиды. Файл заполняется циклами.
# # s = " "*(n-i) + sym*(-1+i*2) + " "*(n-i) + "\n") 

# def make_pyramid(n:int, sym:str):
#     '''Функция принимает на вход n - количество строк пирамиды и sym - символы,
#     которыми она заполняется'''

#     # создаем новый файл, указываем место куда он сохраняется
#     with open("RevPyramid.txt", "w") as r: # ЗАПИСЬ/ПЕРЕЗАПИСЬ "w"
#         for i in range(n, 0, -1):
#             # процесс заполнения пирамиды состоит из трех этапов:
#             # 1.Пробелы; 2.Символы; 3.Пробелы
#             r.write(" "*(n-i) + sym*(-1+i*2) \
#                      + " "*(n-i) + "\n") # в процессе записи в файл добавляется символ перевода строки "\n"

# # вызываем функцию и создаем файл RevPyramid.txt
# print("[bold magenta]IN:[/]")
# n = int(input("Высота: ")) # высота пирамиды
# sym = input("Символ: ") # символ заполнения
# make_pyramid(n, sym) # получаем полностью симметричную фигуру по пробелам и по символам

# # далее считываем информацию из файла.
# print("[bold magenta]OUT:[/]")
# with open("RevPyramid.txt") as r:
#     # итеративно считываем строки из файла. Количество итераций равно n строк пирамиды
#     for i in range(n):
#         print(r.readline(), end="")

# '''IN:
# Высота: 5
# Символ: #
# OUT:
# #########
#  #######
#   #####
#    ###
#     #
# '''

# ######################################### ДРУГОЙ СПОСОБ ПЕРЕВЕРНУТЬ ФИГУРУ ####################################

# #############################
# ## НЕПЕРЕВЕРНУТАЯ ПИРАМИДА ##
# #############################

# # данный случай не добавляет симметричные пробелы на правую часть пирамиды. Пирамида создается циклами.
# # s = s + " "*(n-1-i) + sym*(1+i*2) + "\n"

# def pyramid(n:int, sym:str):
#     '''Функция принимает на вход n - количество строк пирамиды и sym - символы,
#     которыми она заполняется'''
#     s = ""
#     for i in range(n):
#         s = s + " "*(n-1-i) + sym*(1+i*2) + "\n"
#     with open("Pyramid2.txt", "w") as f:
#         f.write(s)

# # вызываем функцию и создаем файл Pyramid2.txt
# print("[bold magenta]IN:[/]")
# n = int(input("Высота: ")) # высота пирамиды
# sym = input("Символ: ") # символ заполнения
# pyramid(n, sym)

# # далее считываем информацию из файла.
# print("[bold magenta]OUT:[/]")
# with open("Pyramid2.txt") as r:
#     print(r.read())

# '''IN:
# Высота: 5
# Символ: $
# OUT:
#     $
#    $$$
#   $$$$$
#  $$$$$$$
# $$$$$$$$$
# '''

# ###########################
# ## ПЕРЕВЕРНУТАЯ ПИРАМИДА ##
# ###########################

# # данный случай не добавляет симметричные пробелы на правую часть пирамиды. Пирамида создается циклами.
# # s = " "*(n-1-i) + "#"*(1+i*2) + "\n" + s

# def pyramid(n:int, sym:str):
#     '''Функция принимает на вход n - количество строк пирамиды и sym - символы,
#     которыми она заполняется'''
#     s = ""
#     for i in range(n):
#         s = " "*(n-1-i) + sym*(1+i*2) + "\n" + s
#     with open("RevPyramid2.txt", "w") as f:
#         f.write(s)

# # вызываем функцию и создаем файл Pyramid2.txt
# print("[bold magenta]IN:[/]")
# n = int(input("Высота: ")) # высота пирамиды
# sym = input("Символ: ") # символ заполнения
# pyramid(n, sym)

# # далее считываем информацию из файла.
# print("[bold magenta]OUT:[/]")
# with open("RevPyramid2.txt") as r:
#     print(r.read())

# '''IN:
# Высота: 5
# Символ: $
# OUT:
# $$$$$$$$$
#  $$$$$$$
#   $$$$$
#    $$$
#     $
# '''
########################## В РЕШЕНИИ РЕАЛИЗОВАНА РАСШИРЕННАЯ РАБОТА С ФАЙЛАМИ  ###################################

# Заполнение пирамиды поисходит циклом. По средсвтвом лямбда функции применен фильтр.

def create_file():
    '''Функция создания файла. В функции реализована проверка файла на наличие, если файл
    отсутствует, программа сообщит и создаст файл. Реализована проверка на наличие информации.
    Если информации в файле нет, программа сообщит. Если информация есть, программа сообщит о
    наличии информации, сохранит инфрмацию, веведет информацию на экран, перезапишет файл, затем
    запишет в него строку "Пирамида\\n" и далее сохранит предыдущую информацию в отдельный файл.
    В методе finally реализовано экстренное сохранение информации из дочернего файла в отдельный
    файл.'''

    tmp = "" # локальая переменная, работает как временное хранилище нинформации
    try:
        with open("Pyramid3.txt", "r+", encoding="utf-8") as f:
            tmp = f.read()
            if len(tmp) > 1:
                print(f"Файл содержит информацию.\n{tmp}")
                with open("Pyramid3.txt", "w", encoding="utf-8") as f:
                    f.write("Пирамида\n")
            else:
                print("Файл пуст.")
    except FileNotFoundError:
        with open ("Pyramid3.txt", "w", encoding="utf-8") as f:
            print("FileNotFoundError! Выполняется создание файла.")
            f.write("Пирамида\n")
    finally:
        print("Сохранение информации из файла в файл 'OldData.txt.")
        with open ("OldData.txt", "w", encoding="utf-8") as f:
            f.write("OldData:\n")
            f.write(tmp)

def bild_pyramid(n:int, sym:str):
    '''Функция принимает на вход n - количество строк пирамиды и sym - символы,
    которыми она заполняется'''
    create_file()
    iter = 0 # iter - начальное значение счетчика итераций
    # генерируем последовательность из нечетных чисел
    for i in filter(lambda x: x % 2, range(1, (n)*2)):
        iter += 1
        # открываем файл на добавление, т.е. на дозаписывание, что означает что предыдущая информация остается
        with open("Pyramid3.txt", "a", encoding="utf-8") as f:
            f.write(" "*(n-iter)+sym*i+" "*(n-iter)+"\n")

    return f"Пирамида высотой {n} из символов {sym} построена.\n"

# вызываем функцию и создаем файл Pyramid3.txt
print("[bold magenta]IN:[/]")
n = int(input("Высота: ")) # высота пирамиды
sym = input("Символ: ") # символ заполнения
print(bild_pyramid(n, sym))

# далее считываем информацию из файла
print("[bold magenta]OUT:[/]")
with open("Pyramid3.txt", "r", encoding="utf-8") as f:
    print(f.read())

'''IN:
Высота: 6
Символ: 3
Файл содержит информацию.
Пирамида
    #
   ###
  #####
 #######
#########

Сохранение информации из файла в файл 'OldData.txt.
Пирамида высотой 6 из символов 3 построена.

OUT:
Пирамида
     3
    333
   33333
  3333333
 333333333
33333333333
'''