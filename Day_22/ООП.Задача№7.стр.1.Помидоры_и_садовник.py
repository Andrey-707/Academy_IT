# Задача№7.стр.11.Садовник_и_помидоры.

# Есть помидор со следующими характеристиками:
# 1.Индекс
# 2.Стадия зрелости (возможные стадии: Отсутствует, Цветение, Зеленый, Красный)
# Помидор может:
# 1.Расти
# 2.Предоставлять информацию о своей зрелости.

# Есть куст с помидорами, который:
# Содержит список томатов, которые на нем растут.
# И так же может:
# 1.Расти вместе с томатами.
# 2.Предоставлять информацию о зрелости всех томатов
# 3.Предоставлять урожай

# Есть садовник, который имеет следующие характеристики::
# 1.Имя
# 2.Возраст
# 3.Растение, за которым он ухаживает
# Садовник может:
# 1.Ухаживать за растением
# 2.Собирать с него урожай

# class Tomato:
# 1.Создайте класс Томат
# 2.Создайте статическое свойство states, которое будет содержать все стадии созревания томата.
# 3.Создайте метод __init__(), в котором будет определены два динамических prtected свойства 1)Индекс -
# передается параметром и 2)Стадия созревания - принимает первое значение из словаря stages
# 4.Создайте метод grow_up(), который будет переводить томат на следующую стадию созревания
# 5.Создайте метод is_ripe(), который будет проверять, что томат созрел (достиг последней стадии созревания)

# class TometoBush:
# 1.Создайте класс Томатный куст
# 2.Определите метод __init__(), который будет принимать в качестве параметра количество томатов и на его
# основе будет создавать список обьектов класса томат. Данный список будет храниться вутри динамического
# свойства класса томат.
# 3.Создайте метод grow_all(), который будет переводить все обьекты из списка томатов на следующий этап
# созревания.
# 4.Создайте метод all_are_ripe(), который будет возвращать True, если все томаты из списка стали спелыми.
# 5.Создайте метод give_away_all(), который будет чистить список томатов после сбора урожая.

# class Gardener:
# 1.Создайте класс садовник
# 2.Создайте метод __init__(), внутри которого будут определены три динамических свойства: 1)name -
# передается параметром,
# является публичным, 2)age - ередается параметром, является и 3)_plant - принимает обьект класс томат,
# является protected.
# 3.Создайте метод work(), который заставляет садовника работать, что позволяет растению становиться зрелым.
# 4.Создайте метод harvest(), который проверяет все ли томаты созрели. Если нет - метод печатает
# предупреждение.
# 5.Создайте статический метод knowledge_base(), который выведет в консоль справку по садоводству.

# Решение:

# класс Tomato/Томат
class Tomato():

	stages = {0: "Росток", 1: "Цветение", 2: "Зеленый", 3: "Красный"} # статическое свойство

	def __init__(self, index):
		"""
		Magic method. Конструктор.
		"""
		self.index = index
		self._stage = 0

	def grow_up(self):
		"""
		Class method. Позволяет растению вырасти (изменить стадию созревания на +1).
		"""
		self._change_stage()

	def is_ripe(self):
		"""
		Class method. Позволяет проверить созрел ли томат.
		"""
		if self._stage >= 3:
			return True
		else:
			return False

	def _change_stage(self):
		"""
		Protected method. Позволяет проверить созрел ли томат, если нет, то перевести стадию
		созревания на +1 и вывести информацию при помощи метода _print_stage()
		"""
		if self._stage < 3:
			self._stage += 1
		self._print_stage()

	# protected method
	def _print_stage(self):
		"""
		Protected method. Позволяет выводить информацию о томате и его стадии созревания в консоль.
		"""
		print(f"Томат {self.index}. Стадия созревания: {Tomato.stages[self._stage]}")


# Проверим класс Tomato на наличие ошибок
# t = Tomato(1) # OUT: Томат 1. Стадия созревания: Росток

# вывод информации
# t._print_stage() # OUT: Стадия созревания: Цветение

# Томат растет
# t.grow_up()

# Итак, все работает без ошибок, переходим к следующему классу

# класс TomatoBush/Томатный куст
class TomatoBush():

	def __init__(self, number):
		self.number = number
		self.tometoes = [Tomato(i) for i in range(1, self.number+1)] # от первого до последнего (number) включительно
		for i in self.tometoes:
			i._print_stage()

	def grow_all(self):
		"""
		Class method. Позволяет томатам из списка томатов вырасти (изменить стадию созревания на +1).
		"""
		for i in self.tometoes:
			i.grow_up()

	def _print_stage(self):
		"""
		Protected method. Позволяет выводить информацию о томате и его стадии созревания в консоль.
		"""
		print(f"Томат {self.number}. Стадия созревания: {Tomato.stages[self._stage]}")

	def all_are_ripe(self):
		"""
		Class method. Позволяет проверить достигли ли ВСЕ томаты из списка томатов сдадии созревания.
		"""
		l = [i.is_ripe() for i in self.tometoes]
		# print(l)
		# print(all(l)) # функция all() возвращает True, если ВСЕ элементы True, так же если список пуст
		return all(l)

	def give_away_all(self):
		"""
		Class method. Позволяет очистить список томатов после сбора урожая.
		"""
		self.tometoes.clear()


# Проверим класс TomatoBush на наличие ошибок
# t_b = TomatoBush(5)
# OUT: Томат 1. Стадия созревания: Росток
# OUT: Томат 2.
# OUT: Томат 3.
# OUT: Томат 4.
# OUT: Томат 5.
# t_b.grow_all()
# OUT: Томат 1. Стадия созревания: Цветение
# OUT: Томат 2.
# OUT: Томат 3.
# OUT: Томат 4.
# OUT: Томат 5.
# t_b.grow_all()
# OUT: Томат 1. Стадия созревания: Зеленый
# OUT: Томат 2.
# OUT: Томат 3.
# OUT: Томат 4.
# OUT: Томат 5.
# t_b.grow_all()
# OUT: Томат 1. Стадия созревания: Красный
# OUT: Томат 2.
# OUT: Томат 3.
# OUT: Томат 4.
# OUT: Томат 5.
# t_b.grow_all()
# OUT: True
# print(t_b.all_are_ripe())
# тут очистка списка
# t_b.give_away_all()
# OUT: ничего не выдается на печать, потому что сработата функция очистки списка self.tometoes.clear()
# t_b.grow_all()
# OUT: если список пуст, функция all() возвращает True
# print(t_b.all_are_ripe())

# Итак, все работает без ошибок, переходим к следующему классу

# класс Gardener/Садовник
class Gardener():

	def __init__(self, name, age, plant):
		self.name = name
		self.age = age
		self._plant = plant

	def work(self):
		"""
		Class method. Заставляет садовника работать, что позволяет растению становиться зрелым.
		"""
		print("Садовник выращивает растение...")
		self._plant.grow_all()
		print("Садовник закончил выращивать растение.")

	def harvest(self):
		"""
		Class method. Проверяет все ли томаты созрели. Если нет - метод печатает предупреждение.
		"""
		print("Садовник собирает урожай...")
		if self._plant.all_are_ripe():
			self._plant.give_away_all()
			print("Садовник собрал урожай.")
		else:
			print("К сожалению, урожай ещё не созрел!")

	@staticmethod
	def knowledge_base():
		"""
		Staticmethod. Выводит в консоль справку по садоводству.
		"""
		print("""Справка по садоводству...""")


# Проверим класс Gardener на наличие ошибок
# g = Gardener("Nikolay", 45, 1)
# OUT: Томат 1. Стадия созревания: Росток
# t._print_stage()
# OUT: Стадия созревания: Цветение
# t.grow_up()
# Итак, все работает без ошибок, переходим к итоговым тестам:

if __name__ == "__main__":
	Gardener.knowledge_base()
	t_b = TometoBush(2)
	g = Gardener("Nikolay", 45, t_b)
	g.work()
	g.work()
	g.harvest()
	g.work()
	g.harvest()

# OUT:
"""
Справка по садоводству...
Томат 1. Стадия созревания: Росток
Томат 2. Стадия созревания: Росток
Садовник выращивает растение...
Томат 1. Стадия созревания: Цветение
Томат 2. Стадия созревания: Цветение
Садовник закончил выращивать растение.
Садовник выращивает растение...
Томат 1. Стадия созревания: Зеленый
Томат 2. Стадия созревания: Зеленый
Садовник закончил выращивать растение.
Садовник собирает урожай...
К сожалению, урожай ещё не созрел!
Садовник выращивает растение...
Томат 1. Стадия созревания: Красный
Томат 2. Стадия созревания: Красный
Садовник закончил выращивать растение.
Садовник собирает урожай...
Садовник собрал урожай.
"""
