#!usr/bin/env/python3
# -*- coding: utf-8 -*-

txt = """Анализ текста по буквам. Практическое задание №2

Написать программу на Python для анализа данного текста, который сохранён в переменной txt по буквам. Программа на Python должна проанализировать данный текст и вывести, или, как некоторые Users говорят, напечатать следующую информацию. Необходимо вывести: 

# Общее количество букв в данном тексте
# Общее количество слов в данном тексте. Словом, считаются любые символы, разделённые пробелами или переходом на следующую строку.
# Подсчитать, каких букв и сколько встречается в тексте
# Вывести их на печать
# 1) в алфавитном порядке
# 2) в порядке убывания частоты
# Регистр букв значения не имеет! Например, в тексте 'Aa' буква 'а'
# встречается 2 раза
# В структуре данных, которую вы выберете для хранения информации
# во время работы программы, НЕ ХРАНИТЬ буквы, которые не встретились"""

# ***********************************
# Тут должна находиться Ваша программа

# Для удобства визуализации вывода (или печати) из модуля rich импортирована функция print (раскоментировать).
#from rich import print


######################
## TASK CONDITION 1 ##
######################


# Если требуется <<вывести общее количество букв в данном тексте>>, то его нужно очистить от символов.
# Список символов, будет инструментом для обработки текста
symbol = [".", ",", "!", "№", ":", "#", "1", "2", ")", "'", " ", "\n"]

# редактирование текста (удаление символов)
letters = txt
for i in symbol:
    letters = letters.replace(i, "")

# Ответ на условие №1:
# Общее количество букв в тексте - это длина строки без символов 'letters'.
print("Общее количество букв в тексте:", len(letters)) # 672

print() # пустая строка


######################
## TASK CONDITION 2 ##
######################


# Если требуется <<вывести общее количество слов в данном тексте>> и <<Словом, считаются любые символы,
# разделённые пробелами или переходом на следующую строку>>, то:
words = txt.split()

# Ответ на условие №2: Общее количество слов в тексте - это длина списка 'words'.
print("Общее количество слов в тексте:", len(words)) # 128

print() # пустая строка


########################
## TASK CONDITION 3.0 ##
########################


# Перейдем к подсчету букв в тексте. Используем в качестве 'инструмента' модуль collections.
from collections import Counter

my_dict = dict(Counter(letters.lower())) # метод строки .lower() позволяет далее не учитывать регистр букв
# print("Буквы и количество их повторений в тексте (без сортировки):")
# print(my_dict)

# Функция key_or_value необходима для альтернативных вариантов решения 3.1 и 3.2.
def key_or_value(d: dict, n: str):
    """
    Функция в качестве аргументов принимает словарь и ключевое слово, возвращает отсортированный
    список элементами которого являются кортежи (key, value) с различными условиями сортировки, в
    зависимости от того, что передано в 'n'. Если 'n' принимает значение 'key' - сортировка
    происходит по ключам, если 'n' принимает значение 'value', происходит обратная сортировка по
    значениям.
    """
    s_keys = []
    s_values = []
    for k, v in d.items():
        if n == 'key':
            s_keys.append((k, v))
        elif n == 'value':
            s_values.append((k, v))

    return sorted(s_keys) if n == 'key' else sorted(s_values, key=lambda i: i[1], reverse=True)


########################
## TASK CONDITION 3.1 ##
########################


# 1) в алфавитном порядке

# Перейдем к сортировке данных.
# Содержимое словаря отсортировать нельзя, так как словарь в Python - это неупорядоченная структура данных.
# Соответственно нам понадобится тип данных, поддерживающий сортировку.

list_keys = sorted(my_dict.keys()) # функция sorted() возвращает отсортированный список

# Ответ на условие 3.1:
# print("1) в алфавитном порядке:")
for i in list_keys:
    print(i, ':', my_dict[i])

# Альтернативный вариант решения задания 3.1
# Решение представлено в виде списка кортежей ("ключ", "значение"), который получен в результате выполнения функции
# key_or_value(), в которую в качестве аргументов передан словарь 'my_dict' и ключевое слово 'key'. Функция
# возвращает отсортированные данные.

# sorted_keys = key_or_value(my_dict, n='key')
# print("1) в алфавитном порядке (альтернативное решение):")
# print(*sorted_keys, sep="\n")

print() # пустая строка

########################
## TASK CONDITION 3.2 ##
########################


# 2) в порядке убывания частоты

# Тут нам так же понадобится список (отсортированный).
list_items = sorted(my_dict.items(), key=lambda i: i[1], reverse=True) # функция sorted() возвращает отсортированный список

# Ответ на условие 3.2:
# print("2) в порядке убывания частоты:")
for i in list_items:
    print(i[0], ':', i[1])

# Альтернативный вариант решения задания 3.2
# Решение представлено в виде списка кортежей ("ключ", "значение"), который получен в результате выполнения функции
# key_or_value(), в которую в качестве аргументов передан словарь 'my_dict' и ключевое слово 'value' Функция
# возвращает отсортированные данные.

# inv_sorted_values = key_or_value(my_dict, n='value')
# print("2) в порядке убывания частоты (альтернативное решение):")
# print(*inv_sorted_values, sep="\n")

# ***********************************
# print('END')
