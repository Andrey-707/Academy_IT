#D:\Python\Test
# -*- coding: utf-8 -*-

txt = """Анализ текста по буквам. Практическое задание №2

Написать программу на Python для анализа данного текста, который сохранён в переменной txt по буквам. Программа на Python должна проанализировать данный текст и вывести, или, как некоторые Users говорят, напечатать следующую информацию. Необходимо вывести: 

# Общее количество букв в данном тексте
# Общее количество слов в данном тексте. Словом, считаются любые символы, разделённые пробелами или переходом на следующую строку.
# Подсчитать, каких букв и сколько встречается в тексте
# Вывести их на печать
# 1) в алфавитном порядке
# 2) в порядке убывания частоты
# Регистр букв значения не имеет! Например, в тексте 'Aa' буква 'а'
# встречается 2 раза
# В структуре данных, которую вы выберете для хранения информации
# во время работы программы, НЕ ХРАНИТЬ буквы, которые не встретились"""

# ***********************************
# Тут должна находиться Ваша программа

# Для удобства визуализации вывода (или печати) из модуля rich импортирована функция print (раскоментировать).
from rich import print

print("[bold magenta]Program start\n[/]")


######################
## TASK CONDITION 0 ##
######################


# # Добавлено допусловие (условие 0) и закоментировано, т.к. не является обязательным к выполнению!!!

# # Если потребуется работать с текстовым файлом, а не с готовым текстом, сохраненным в переменной в файле и на нашем ПК
# # текстовый файл отсутствует, создадим его для дальнейшей обрабоки, при записи используем кодировку "utf-8".
# with open("txt.txt", "w", encoding="utf-8") as w:
#     w.write(txt)
#     print("[bold blue]Файл 'txt.txt' создан[/]")

# input()

# # Предварительный просмотр (чтение файла с текстом).
# print("[bold green]Чтение файла 'txt.txt'\n[/]")
# with open("txt.txt", encoding="utf-8") as r:
#     print(r.read())

# input()

# # Если у нас есть текстовый файл 'txt.txt', НО нет переменной с готовым текстом 'txt', создадим эту переменную из
# # текста, сохраненного в файле 'txt.txt' .
# txt = ""

# # Итерация по строкам файла 'txt.txt' и добавление данных в переменную 'txt'
# with open("txt.txt", encoding="utf-8") as r:
#     for line in r.readlines():
#         txt += line
#     print("[bold blue]Переменная 'txt' создана[/]")

# input()

# # Предварительный просмотр (вывод текста).
# print("[bold green]Чтение переменной 'txt'\n\n[/]" + txt)

# input()


######################
## TASK CONDITION 1 ##
######################


# Если требуется посчитать общее количество букв в данном тексте, нужно очистить текст от символов.
# Список символов, будет инструментом для обработки текста
symbol = [".", ",", "!", "№", ":", "#", "1", "2", ")", "'", " ", "\n"]

# редактирование текста (удаление символов)
letters = txt
for i in symbol:
    letters = letters.replace(i, "")
print("[bold blue]Редактирование текста завершено[/]")

input()

# # Сохранение текста с буквами
# with open("letters.txt", "w", encoding="utf-8") as w:
#     w.write(letters)
#     print("[bold blue]Файл 'letters.txt' создан[/]")

# input()

# # Предварительный просмотр (чтение файла с текстом).
# print("[bold green]Чтение файла 'letters.txt'\n[/]")
# with open("letters.txt", encoding="utf-8") as r:
#     print(r.read())

# input()

# Ответ на условие №1: Общее количество букв в тексте - это длина строки без символов 'letters'.
print("Общее количество букв в тексте:", len(letters)) # 672

input()


######################
## TASK CONDITION 2 ##
######################


# Если <<Словом, считаются любые символы, разделённые пробелами или переходом на следующую строку>>, то:
words = txt.split()
print("[bold blue]Список слов создан[/]")

input()

# Ответ на уловие №2: Общее количество слов в тексте - это длина списка 'words'.
print("Общее количество слов в тексте:", len(words)) # 128

input()


########################
## TASK CONDITION 3.0 ##
########################


# Перейдем к подсчету букв в тексте. Используем в качестве 'инструмента' модуль collections.
from collections import Counter

my_dict = dict(Counter(letters.lower())) # метод строки .lower() позволяет далее не учитывать регистр букв
print("[bold blue]Словарь создан[/]")

input()

print("Буквы и количество их повторений в тексте (без сортировки):", my_dict)

input()

# Данная функция необходима для альтернативных вариантов решения 3.1 и 3.2. Описание функции приведено в документ-стоке.
def key_or_value(d:dict, n:str):
    """
    Функция в качетсве аргументов принимает словарь и ключевое слово, возвращает отсортированный список элементами
    которого являются кортежи (key, value) с различными условиями сортировки, в заисимости от того, что передано
    в 'n'. Если 'n' принимает значение 'key' - сортировка происходитпо ключам, если 'n' принимает значение
    'value', происходит обратная сортировка по значениям.
    """
    s_keys = []
    s_values = []
    for k, v in d.items():
        if n == 'key':
            s_keys.append((k, v))
        elif n == 'value':
            s_values.append((k, v))

    return sorted(s_keys) if n == 'key' else sorted(s_values, key=lambda i: i[1], reverse=True)


########################
## TASK CONDITION 3.1 ##
########################


# 1) в алфавитном порядке

# Перейдем к сортировке данных.
# Содержимое словаря отсортировать нельзя, так как словарь в Python - это неупорядоченная структура данных.
# Соответственно нам понадобится тип данных, поддерживающий сортировку.

list_keys = sorted(my_dict.keys()) # функция sorted() возвращает отсортированный список
print("[bold blue]Список с ключами словаря создан[/]")

input()

# Предварительный просмотр (СПИСОК С КЛЮЧАМИ СЛОВАРЯ)
print("Список с ключами словаря", list_keys)

input()

# Ответ на уловие 3.1:
print("1) в алфавитном порядке:")
for i in list_keys:
    print(i, ':', my_dict[i])

input()

# Так же альтернативный вариант решения задания 3.1 представлен в виде списка кортежей ("ключ", "значение").
# Список кортежей ("ключ", "значение") получен в результате выполнения функции key_or_value(), в которую в качестве
# аргументов передан словарь 'my_dict' и ключевое слово 'key', затем применена сортировка данных.

# При необходимости раскомментировать стоки 116-118

sorted_keys = key_or_value(my_dict, n='key')
print("1) в алфавитном порядке (альтернативное решение):")
print(*sorted_keys, sep="\n")

input()


########################
## TASK CONDITION 3.2 ##
########################


# 2) в порядке убывания частоты

# Тут нам так же понадобится список (отсортированный).
list_items = sorted(my_dict.items(), key=lambda i: i[1], reverse=True) # функция sorted() возвращает отсортированный список

print("[bold blue]Список с кортежами 'ключ, значение' создан[/]")

input()

# Предварительный просмотр (СПИСОК С КОРТЕЖАМИ 'КЛЮЧ, ЗНАЧЕНИЕ')
print("Список с кортежами 'ключ, значение'", list_items)

input()

# Ответ на уловие 3.2:
print("2) в порядке убывания частоты:")
for i in list_items:
    print(i[0], ':', i[1])

input()

# Так же альтернативный вариант решения задания 3.2 представлен в виде списка кортежей ("ключ", "значение").
# Список кортежей ("ключ", "значение") получен в результате выполнения функции key_or_value(), в которую в качестве
# аргументов передан словарь 'my_dict' и ключевое слово 'value', затем применена перевернутая сортировка данных.

# При необходимости раскомментировать стоки 173-175

inv_sorted_values = key_or_value(my_dict, n='value')
print("2) в порядке убывания частоты (альтернативное решение):")
print(*inv_sorted_values, sep="\n")

print("[bold magenta]Program finish[/]")

# ***********************************
# print('END')
