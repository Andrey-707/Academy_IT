# –†–µ—à–µ–Ω–∏–µ SUDOKU –≤ —á–∞—Ç–µ Telegram –±–æ—Ç–∞. Telegram_Bot.Sudoku_1.0
# Sudoku_1bot
# Sudoku_Bot

# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ —á–∞—Ç Telegram —Ä–µ—à–µ–Ω–Ω—É—é –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É SUDOKU –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–º–µ—Ç –∫–Ω–æ–ø–∫—É —Å
# –Ω–∞–¥–ø–∏—Å—å—é 'üé≤ Solve It'. –ü—É—Å—Ç–æ–π —Å–∏–º–≤–æ–ª –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ –≤–∏–¥–µ –Ω–æ–ª–∏–∫–∞.

import telebot, pathlib

from rich import print
from telebot import types
from sudoku_config import token


bot = telebot.TeleBot(token)


def read_sudoku(path):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—É—Ç—å (—Ñ–∞–π–ª .txt), –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ —á—Ç–µ–Ω–∏–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –≤ –≤–∏–¥–µ –¥–≤—É–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞.
    """
    path = pathlib.Path(path)
    with path.open() as f:
        puzzle = f.read()
    digits = [c for c in puzzle if c in '1234567890']
    grid = [digits[9*i: 9*i+9] for i in range(9)]
    return grid


def visual_map(A):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–µ—Ç–∫—É SUDOKU, –≤—ã–≤–æ–¥–∏—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–Ω–Ω—É—é —Å–µ—Ç–∫—É –Ω–∞ —ç–∫—Ä–∞–Ω.
    """
    text = ""
    for i in range(9):
        if i % 3 == 0:
            if i == 0:
                text += "‚îé‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îí\n"
            else:
                text += "‚î†‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î®\n"
        for j in range(9):
            if j % 3 == 0:
                text += "‚îÉ "
            if j == 8:
                text = text + str(A[i][j]) + " ‚îÉ "
            else:
                text = text + str(A[i][j]) + " "
        text += "\n"
    text += "‚îñ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îö"
    return text


def possible(grid, y, x, n):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ —á–∏—Å–ª–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —è—á–µ–π–∫–µ SUDOKU.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–µ—Ç–∫—É, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–∏—Å–ª–∞ –∏ —á–∏—Å–ª–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
    """
    numbers = [str(i) for i in range(1, 10)]
    if n not in numbers:
        return False
    
    for i in range(9):
        if grid[y][i] == n:
            return False
    
    for i in range(9):
        if grid[i][x] == n:
            return False
    
    x0 = (x//3)*3
    y0 = (y//3)*3
    for i in range(3):
        for j in range(3):
            if grid[y0+i][x0+j] == n:
                return False
    return True


def solve():
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è SUDOKU.
    """
    global gmap, vmap
    for y in range(9):
        for x in range(9):
            if gmap[y][x] == '0':
                for n in range(1, 10):
                    number = str(n)
                    if possible(gmap, y, x, number):
                        gmap[y][x] = number
                        solve()
                        gmap[y][x] = '0'
                return
    vmap = visual_map(gmap)

def show_map(vmap):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É. –í—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤ —á–∞—Ç.
    """
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üé≤ Solve It")
    markup.add(item1)
    return {
        'text': '<code>' + vmap + '</code>',
        'reply_markup': markup,
        'parse_mode': 'html'
    }


# Handle '/start' and '/help'
@bot.message_handler(commands=['start', 'help'])
def welcome_and_map(message):
    """
    Reply to user message '/start' or '/help'. Add map.
    """
    # message
    bot.send_message(message.chat.id,
    "Hi, {0.first_name}!\n"
    "I am <b>{1.first_name}</b>.\n".format(
        message.from_user, bot.get_me()), parse_mode='html')

    # visual map
    vmap = visual_map(gmap)

    # Message
    bot.send_message(message.chat.id, **show_map(vmap))


@bot.message_handler(content_types=["text"])
def send_messeges(message):
    if message.text == "üé≤ Solve It":
        solve()
        bot.send_message(message.chat.id, **show_map(vmap))


# Handle pressing buttons
@bot.callback_query_handler(func=lambda call: True)
def echo_message(call):
    """
    Callback function.
    """
    bot.reply_to(call.message, call.data)


print("Program start")

# Game Map
gmap = read_sudoku('Telegram_Sudoku1.txt')
print(gmap)

bot.polling(none_stop=True)

print("Program finish")
