# Задача№7.стр.30.Class_Tree.
# Создайте класс Tree - дерево. Оно должно иметь год посадки, текущий возраст и метод, который увеличивает
# возраст дерева на 1 год.
# Наследуясь от класса Tree, создайте класс Apple_tree - яблоня. Она должна иметь максимальный возраст
# яблони, и метод info(), который показывает всю информацию о яблоне.
# Переопределите метод, увеличивающий возраст, чтобы он после каждого прошедшего года записывал яблоки в
# список урожайности.

# Решение:
from random import randint


# Класс Tree/Дерево.
class Tree():

    def __init__(self, planting_year, age=0):
        """
        Magic method. Конструктор. Принимает год посадки и возраст (по умолчани равен нулю).
        """
        self.planting_year = planting_year
        self.age = age

    def increase_age(self, year=1):
        """
        Class method. Увеличить возраст дерева (по умолчанию на 1 год).
        """
        self.age += year
        print(f"Возраст Дерева увеличился на {year}.")


# Класс AppleTree/Яблоня (наследуется от класса Tree/Дерево).
class AppleTree(Tree):

    max_age = 50 # максимальнй возраст яблони, при достижении возраста яблоня не приносит урожай

    def __init__(self, planting_year, age=0):
        """
        Magic method. Конструктор. Принимает год посадки и возраст (по умолчани равен нулю).
        """
        super().__init__(planting_year, age=0)
        self._age = age # мягкая (лояльная) инкапсуляция, говорит о том, что возраст является приватным
        self.harvest = []

    def info(self):
        """
        Class method. Информация о яблоне.
        """
        print(f"Год посадки: {self.planting_year}, Возраст Яблони: {self._age}, Урожай: {self.harvest}")

    def increase_age(self, year=1):
        """
        Class method. Увеличить возраст яблони (по умолчанию на 1 год).
        """
        self._age += year # мягкая инкапсуляция, говорит о том, что возраст является приватным
        if self._age < self.max_age: # мягкая инкапсуляция, говорит о том, что возраст является приватным
            self.harvest += [randint(30, 50)]
        else:
            print("Яблоня состарилась и не приносит урожай.")


# Класс Дерево

# Создаем экземпляр класса - простое Дерево, которое посажено в 1992 году
t1 = Tree(1992)

# Возраст Дерева увеличился на 1 год
t1.increase_age()

# Выводим ни экран возраст дерева
print("Возраст Дерева:", t1.age) # OUT: Возраст Дерева: 1


# Класс Яблоня

# Создаем экземпляр класса - Яблоня, которое посажено в 1992 году
t2 = AppleTree(1992)

# Выводим ни экран информация о Яблоне
t2.info() # OUT: Год посадки: 1992, Возраст яблони: 0, Урожай: []

# Яблоня вырасла на 1 год
t2.increase_age()

# Выводим ни экран информация о Яблоне
t2.info() # OUT: Год посадки: 1992, Возраст Яблони: 1, Урожай: [50]

# Яблоня вырасла ЕЩЁ на 1 год
t2.increase_age()

# Выводим ни экран информация о Яблоне
t2.info() # OUT: Год посадки: 1992, Возраст Яблони: 2, Урожай: [50, 42]

# Дополнительно добавим максимальный возраст Яблони, при достижении которого Яблоня не приносит урожай
# (НЕ ТРЕБУЕТСЯ ПО УСЛОВИЮ ЗАДАЧИ).
# Дерево вырасло на 50 лет
t2.increase_age(50) # OUT: Яблоня состарилась и не приносит урожай.

# Выводим ни экран информация о Яблоне
t2.info() # OUT: Год посадки: 1992, Возраст Яблони: 52, Урожай: [45, 30]
