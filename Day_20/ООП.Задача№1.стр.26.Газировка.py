# Задача№1.стр.26.Газировка
# Создайте класс Soda (для определения типа газировка), принимающий один аргумент при инициализации 
# (отвечающий за добавку к выбираемому лимонаду).
# В этом классе реализуйте метод show_my_drink(), выводящий на печать "Газировка" с добавкой {добавка}
# в случае наличия добавки, а иначе отобразится следующая фраза: "Обычная газировка".

from rich import print


# Реализация:
class Soda():
    def __init__(self, additive=None):
        '''Magic method. Initialization object'''
        self.additive = additive

    def show_my_drink(self):
        '''Shows information about the drink'''
        if self.additive and isinstance(self.additive, str):
            print(f"Газировка с добавкой '{self.additive}'.")
        else:
            print("Обычная газировка.")


# run
# создание экземпляра класса с добавкой
s1 = Soda("lime")

# вывод информации о первом напитке
s1.show_my_drink() # OUT: Газировка с добавкой 'lime'.

# создание экземпляра класса без добавки
s2 = Soda()

# вывод информации о втором напитке
s2.show_my_drink() # OUT: Обычная газировка.

# Опционально (не требуется в задаче) добавим к газировке без добавки добавку.
s2.additive = "orange"

# вывод информации о втором напитке
s2.show_my_drink() # OUT: Газировка с добавкой 'orange'.

# вывод информации о первом напитке (добавка не изменилась)
s1.show_my_drink() # OUT: Газировка с добавкой 'lime'.

# Опционально (не требуется в задаче) вывод информации о первом напитке БЕЗ МЕТОДА show_my_drink()
print(f"Газировка с добавкой '{s1.additive}'.") # OUT: Газировка с добавкой 'lime'.

# Опционально (не требуется в задаче) попытка создать добавку в виде типа даных int. Создается
# газировка БЕЗ добавки.
# создание экземпляра класса с добавкой
s3 = Soda(4)
s3.show_my_drink() # OUT: Обычная газировка.
